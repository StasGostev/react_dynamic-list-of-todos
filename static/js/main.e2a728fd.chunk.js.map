{"version":3,"sources":["components/User.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","name","TodoItem","className","item","completed","title","components_User","user","concat","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sorted","requested","loaded","todoList","loadData","bind","assertThisInitialized","url","fetch","then","result","json","data","_this2","setState","Promise","all","requestUrl","_ref","_ref2","slicedToArray","todos","users","map","todo","objectSpread","find","u","userId","id","key","components_TodoItem","onClick","React","Component","App","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAceA,MALf,SAAcC,GACV,OACIC,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,OCEJC,MAVf,SAAkBL,GAChB,OACEC,EAAAC,EAAAC,cAAA,MAAIG,UAAWN,EAAMO,KAAKC,UAAY,YAAc,gBAClDP,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,KAAKE,OAChBR,EAAAC,EAAAC,cAACO,EAAD,CAAMN,KAAMJ,EAAMO,KAAKI,KAAKP,OAC5BH,EAAAC,EAAAC,cAAA,aAAAS,OAAQZ,EAAMO,KAAKC,cCwDVK,cA5DX,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACDqB,MAAQ,CACTC,OAAQ,KACRC,WAAW,EACXC,QAAQ,EACRC,SAAU,IAEdX,EAAKY,SAAWZ,EAAKY,SAASC,KAAdZ,OAAAa,EAAA,EAAAb,CAAAD,IARDA,0EAWRe,GACP,OAAOC,MAAMD,GACRE,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAG,GAAI,OAAIA,uCAGX,IAAAC,EAAAlB,KACPA,KAAKmB,SAAS,CAAEb,WAAW,IAE3Bc,QAAQC,IAAI,CAACrB,KAAKsB,WAAW,8CAC7BtB,KAAKsB,WAAW,gDACbR,KAAK,SAAAS,GAAA,IAAAC,EAAA1B,OAAA2B,EAAA,EAAA3B,CAAAyB,EAAA,GAAEG,EAAFF,EAAA,GAASG,EAATH,EAAA,UAAoBN,EAAKC,SAAS,CACtCZ,QAAQ,EAAMC,SAAUkB,EAAME,IAAI,SAACC,GAAD,OAAA/B,OAAAgC,EAAA,EAAAhC,CAAA,GAC3B+B,EAD2B,CACrBnC,KAAMiC,EAAMI,KAAK,SAACC,GAAD,OAAOH,EAAKI,SAAWD,EAAEE,8CAM3D,OAAKlC,KAAKI,MAAME,UAILN,KAAKI,MAAMG,OAEdvB,EAAAC,EAAAC,cAAA,OAAKiD,IAAI,WACLnD,EAAAC,EAAAC,cAAA,SAAOG,UAAU,SACbL,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,qBACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,0BACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,4BAGZF,EAAAC,EAAAC,cAAA,aACKc,KAAKI,MAAMI,SAASoB,IAAI,SAACtC,GAAD,OAAUN,EAAAC,EAAAC,cAACkD,EAAD,CAAU9C,KAAMA,EAAM6C,IAAK7C,EAAK4C,UASnFlD,EAAAC,EAAAC,cAAA,UAAQG,UAAU,YAAlB,iBAvBIL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,WAAWgD,QAASrC,KAAKS,UAA3C,yBAjCO6B,IAAMC,WCSdC,MARf,WACE,OACExD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACuD,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.e2a728fd.chunk.js","sourcesContent":["import React from 'react';\n\n// class User extends React.Component {\n//     render() {\n//         return (\n//             <td>{this.props.name}</td>\n//         )\n//     }\n// }\nfunction User(props) {\n    return (\n        <td>{props.name}</td>\n    );\n}\nexport default User;\n","import React from \"react\";\nimport User from \"./User\";\n\nfunction TodoItem(props) {\n  return (\n    <tr className={props.item.completed ? \"completed\" : \"notComplited\"}>\n      <td>{props.item.title}</td>\n      <User name={props.item.user.name} />\n      <td>{`${props.item.completed}`}</td>\n    </tr>\n  );\n}\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sorted: null,\n            requested: false,\n            loaded: false,\n            todoList: []\n        }\n        this.loadData = this.loadData.bind(this)\n    }\n\n    requestUrl(url) {\n        return fetch(url)\n            .then(result => result.json())\n            .then(data => data)\n    }\n\n    loadData() {\n        this.setState({ requested: true });\n\n        Promise.all([this.requestUrl('https://jsonplaceholder.typicode.com/todos'),\n        this.requestUrl('https://jsonplaceholder.typicode.com/users')\n        ]).then(([todos, users]) => this.setState({\n            loaded: true, todoList: todos.map((todo) => ({\n                ...todo, user: users.find((u) => todo.userId === u.id)\n            }))\n        }))\n    }\n\n    render() {\n        if (!this.state.requested) {\n            return (\n                <button className=\"load-btn\" onClick={this.loadData}>Load ToDo List</button>\n            )\n        } else if (this.state.loaded) {\n            return (\n                <div key=\"wrapper\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <td><span>Task</span></td>\n                                <td><span>User Name</span></td>\n                                <td><span>Completed</span></td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.todoList.map((item) => <TodoItem item={item} key={item.id} />)}\n                        </tbody>\n                    </table>\n                </div>\n\n            )\n        }\n\n        return (\n            <button className=\"load-btn\">...Loading...</button>\n        )\n    }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}